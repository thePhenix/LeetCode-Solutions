{"id":802100825,"lang":"javascript","lang_name":"JavaScript","time":"1 year, 3 months","timestamp":1663428617,"status":10,"status_display":"Accepted","runtime":"109 ms","url":"/submissions/detail/802100825/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"44.4 MB","code":"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar prepare = (root, mem , level) => {\n    if(!mem[level]){\n        mem[level] = [];\n    }\n    \n    if(!root){\n        mem[level].push(-100000);\n        return;\n    }\n    \n    mem[level].push(root.val);\n    prepare(root.left, mem, level + 1);\n    prepare(root.right, mem, level + 1);\n    \n    \n}\nvar isSymmetric = function(root) {\n    let mem = [];\n    prepare(root, mem, 0);\n    let symmetric = true;\n    mem.forEach(list => {\n        var j = list.length - 1;\n       for(var i = 0; i < j; i++){\n           if(list[i] !== list[j--]){\n               symmetric = false;\n               return false;\n           }\n       } \n    });\n    return symmetric;\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}