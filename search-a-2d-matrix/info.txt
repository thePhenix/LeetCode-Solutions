{"id":1020511075,"lang":"csharp","lang_name":"C#","time":"4 months, 1 week","timestamp":1691955670,"status":10,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/1020511075/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"40.9 MB","code":"public class Solution {\n    public bool SearchMatrix(int[][] matrix, int target) {\n        int m = matrix.Length;\n        int n = matrix[0].Length;\n        int rLow = 0;\n        int rHigh = m - 1;\n        int cLow = 0;\n        int cHigh = n - 1;\n        int searchRow = -1;\n        while(rLow <= rHigh){\n            int rMid = (rLow + rHigh) / 2;\n            if(target >= matrix[rMid][0] && target <= matrix[rMid][n-1]){\n                searchRow = rMid;\n                break;\n            }else if(target < matrix[rMid][0]){\n                rHigh = rMid - 1;\n            }else{\n                rLow = rMid + 1;\n            }\n        }\n\n        if(searchRow >= 0){\n            while(cLow <= cHigh){\n                int mid = (cLow + cHigh) /2;\n                if(matrix[searchRow][mid] == target){\n                    return true;\n                }else if(matrix[searchRow][mid] > target){\n                    cHigh = mid - 1;\n                }else{\n                    cLow = mid + 1;\n                }\n            }\n        }\n        \n        return false;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1}