{"id":800771466,"lang":"csharp","lang_name":"C#","time":"1 year, 3 months","timestamp":1663274027,"status":10,"status_display":"Accepted","runtime":"150 ms","url":"/submissions/detail/800771466/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"47 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    Dictionary<int, int> mem;\n    int maxVal = int.MinValue;\n    public void FindSolution(TreeNode root){\n        if(root == null){\n            return;\n        }\n        \n        if(mem.ContainsKey(root.val)){\n            mem[root.val]++;\n        }else{\n            mem[root.val] = 1;\n        }\n        \n        if(mem[root.val] > maxVal){\n            maxVal = mem[root.val];\n        }\n        \n        FindSolution(root.left);\n        FindSolution(root.right);\n\n    }\n    \n    public int[] FindMode(TreeNode root) {\n        mem = new Dictionary<int,int>();\n        FindSolution(root);\n        var solutions = new List<int>();\n        foreach(var item in mem){\n            if(item.Value == maxVal){\n                solutions.Add(item.Key);\n            }\n        }\n        return solutions.ToArray();\n    }\n}","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false,"flag_type":1}