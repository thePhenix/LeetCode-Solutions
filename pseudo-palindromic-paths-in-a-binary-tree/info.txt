{"id":800751089,"lang":"csharp","lang_name":"C#","time":"1 year, 3 months","timestamp":1663271976,"status":10,"status_display":"Accepted","runtime":"665 ms","url":"/submissions/detail/800751089/","is_pending":"Not Pending","title":"Pseudo-Palindromic Paths in a Binary Tree","memory":"55.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n     public int count = 0;\n        public void FindSolution(TreeNode root, Dictionary<int, int> mem, int level)\n        {\n            if (mem.ContainsKey(root.val))\n            {\n                mem[root.val]++;\n            }\n            else\n            {\n                mem[root.val] = 1;\n            }\n\n            if (root.left == null && root.right == null)\n            {\n                Calculate(mem, level);\n            }\n\n            if (root.left != null)\n            {\n                FindSolution(root.left, mem, level + 1);\n            }\n            \n\n            if (root.right != null)\n            {\n                FindSolution(root.right, mem, level + 1);\n            }\n\n            mem[root.val]--;\n            if (mem[root.val] == 0)\n            {\n                mem.Remove(root.val);\n            }\n        }\n\n        public void Calculate(Dictionary<int, int> mem, int level)\n        {\n            if (level % 2 == 0)\n            {\n                foreach (var item in mem.Values)\n                {\n                    if (item % 2 == 1)\n                    {\n                        return;\n                    }\n                }\n                count++;\n            }\n            else\n            {\n                bool isOddTaken = false;\n                foreach (var item in mem.Values)\n                {\n                    if (item % 2 == 1)\n                    {\n                        if (isOddTaken)\n                        {\n                            return;\n                        }\n\n                        isOddTaken = true;\n                    }\n                }\n\n                count++;\n            }\n        }\n\n        public int PseudoPalindromicPaths(TreeNode root)\n        {\n            FindSolution(root, new Dictionary<int, int>(), 1);\n            return count;\n        }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"pseudo-palindromic-paths-in-a-binary-tree","has_notes":false,"flag_type":1}