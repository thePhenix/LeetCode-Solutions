{"id":1013976731,"lang":"csharp","lang_name":"C#","time":"4 months, 2 weeks","timestamp":1691339344,"status":10,"status_display":"Accepted","runtime":"139 ms","url":"/submissions/detail/1013976731/","is_pending":"Not Pending","title":"Flood Fill","memory":"46.5 MB","code":"public class Solution {\n    public int[][] FloodFill(int[][] image, int sr, int sc, int color) {\n        int rLen = image.Length;\n        int cLen = image[0].Length;\n        bool[][] visited = new bool[rLen][];\n        for(var i = 0; i < rLen; i++){\n            visited[i] = new bool[image[0].Length];\n        }\n\n        int initColor = image[sr][sc];\n        var queue = new Queue<(int,int)>();\n\n        queue.Enqueue((sr,sc));\n        visited[sr][sc] = true;\n        image[sr][sc] = color;\n\n        while(queue.Count > 0){\n            var curr = queue.Dequeue();\n            var row = curr.Item1;\n            var col = curr.Item2;\n            var neighbours = new List<(int,int)>()\n            {\n                (row - 1, col),\n                (row, col - 1),\n                (row + 1, col),\n                (row, col + 1)\n            };\n\n            for(var i = 0; i < 4; i++)\n            {\n                var r = neighbours[i].Item1;\n                var c = neighbours[i].Item2;\n                if(r >= 0 && r < rLen && c >= 0 && c < cLen && !visited[r][c]){\n                    if(image[r][c] == initColor){\n                        visited[r][c] = true;\n                        image[r][c] = color;\n                        queue.Enqueue((r,c));\n                    }\n                }\n            }\n        }\n\n        return image;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill","has_notes":false,"flag_type":1}