{"id":1019563338,"lang":"csharp","lang_name":"C#","time":"4 months, 1 week","timestamp":1691869459,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1019563338/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"39.2 MB","code":"public class Solution {\n    public int Search(int[] nums, int target) {\n        int low = 0;\n        int high = nums.Length - 1;\n        int min = int.MaxValue;\n        int pivot = -1;\n\n        while(low <= high){\n            int mid = (low + high) / 2;\n            if(nums[low] <= nums[mid]){\n                if(nums[low] < min){\n                    min = nums[low];\n                    pivot = low;\n                }\n                low = mid + 1;\n            }\n            else{\n                if(nums[mid] < min){\n                    min = nums[mid];\n                    pivot = mid;\n                }\n                high = mid - 1;\n            }\n        }\n        \n        if(nums[nums.Length - 1] < target){\n            low = 0;\n            high = pivot - 1;\n        }else {\n            low = pivot;\n            high = nums.Length - 1;\n        }\n        \n        while(low <= high){\n            int mid = (low + high) / 2;\n            if(nums[mid] == target){\n                return mid;\n            }else if(nums[mid] > target){\n                high = mid - 1;\n            }else{\n                low = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}